// see https://spec.json5.org/#syntactic-grammar and
// https://spec.json5.org/#lexical-grammar

text = _{
  SOI ~ value ~ EOI
}

value = _{
  null |
  boolean |
  string |
  number |
  object |
  array
}

null = @{
  "null"
}

boolean = @{
  "true" |
  "false"
}

string = ${
  "\"" ~ double_string_character* ~ "\"" |
  "'" ~ single_string_character* ~ "'"
}

number = @{
  numeric_literal |
  "+" ~ numeric_literal |
  "-" ~ numeric_literal
}

object = {
  "{" ~ "}" |
  "{" ~ key_value_pair ~ ("," ~ key_value_pair)* ~ ","? ~ "}"
}

array = {
  "[" ~ "]" |
  "[" ~ value ~ ("," ~ value)* ~ ","? ~ "]"
}

key_value_pair = {
  key ~ ":" ~ value
}

key = _{
  identifier |
  string
}

identifier = ${
  identifier_start ~ identifier_part*
}

numeric_literal = _{
  hex_integer_literal |
  decimal_literal |
  "Infinity" |
  "NaN"
}

decimal_literal = _{
  decimal_integer_literal ~ "." ~ ASCII_DIGIT* ~ exponent_part? |
  "." ~ ASCII_DIGIT+~ exponent_part? |
  decimal_integer_literal ~ exponent_part?
}

decimal_integer_literal = _{
  "0" |
  ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*
}

exponent_part = _{
  exponent_indicator ~ signed_integer
}

exponent_indicator = _{
  ^"e"
}

signed_integer = _{
  ASCII_DIGIT+ |
  "+" ~ ASCII_DIGIT+ |
  "-" ~ ASCII_DIGIT+
}

hex_integer_literal = _{
  "0x" ~ ASCII_HEX_DIGIT+ |
  "0X" ~ ASCII_HEX_DIGIT+
}

double_string_character = _{
  "\\" ~ escape_sequence |
  line_continuation |
  !"\"" ~ character_literal
}

single_string_character = _{
  "\\" ~ escape_sequence |
  line_continuation |
  !"'" ~ character_literal
}

character_literal = @{
  !("\\" | line_terminator) ~ ANY
}

line_continuation = _{
  "\\" ~ line_terminator_sequence
}

line_terminator_sequence = _{
  "\u{000D}" ~ "\u{000A}" |
  line_terminator
}

line_terminator = _{
  "\u{000A}" |
  "\u{000D}" |
  "\u{2028}" |
  "\u{2029}"
}

identifier_start = _{
  &(unicode_letter | "$" | "_") ~ character_literal |
  "\\u" ~ unicode_escape_sequence
}

identifier_part = _{
  identifier_start |
  &(
    NONSPACING_MARK |
    DIACRITIC | // not sure about this one, spec says "Combining spacing mark (Mc)"
    DECIMAL_NUMBER |
    CONNECTOR_PUNCTUATION |
    "\u{200C}" |
    "\u{200D}"
  ) ~ character_literal
}

unicode_letter = _{
  UPPERCASE_LETTER |
  LOWERCASE_LETTER |
  TITLECASE_LETTER |
  MODIFIER_LETTER |
  OTHER_LETTER |
  LETTER_NUMBER
}

escape_sequence = _{
  character_escape_sequence |
  nul_escape_sequence |
  "x" ~ hex_escape_sequence |
  "u" ~ unicode_escape_sequence
}

nul_escape_sequence = @{
  "0"
}

character_escape_sequence = @{
  single_escape_character |
  non_escape_character
}

single_escape_character = _{
  "'" |
  "\"" |
  "\\" |
  "b" |
  "f" |
  "n" |
  "r" |
  "t" |
  "v"
}

non_escape_character = _{
  !(escape_character | line_terminator) ~ ANY
}

escape_character = _{
  single_escape_character |
  ASCII_DIGIT |
  "x" |
  "u"
}

hex_escape_sequence = @{
  ASCII_HEX_DIGIT{2}
}

unicode_escape_sequence = @{
  ASCII_HEX_DIGIT{4}
}

WHITESPACE = _{
  "\u{0009}" |
  "\u{000B}" |
  "\u{000C}" |
  "\u{0020}" |
  "\u{00A0}" |
  "\u{FEFF}" |
  SPACE_SEPARATOR |
  line_terminator
}

COMMENT = _{
  "/*" ~ (!"*/" ~ ANY)* ~ "*/" |
  "//" ~ (!line_terminator ~ ANY)*
}
